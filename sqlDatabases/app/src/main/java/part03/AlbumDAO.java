package databases.part03;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import databases.part02.Artist;

/**
 * Data Access Object for the Album table in the Chinook database.
 */
public class AlbumDAO {

    /**
     * The connection string used to connect to the database. You MUST use this
     * string when connecting to the database using JDBC. In the unit tests, this
     * field will be set to a different value.
     */
    private final String connectionString;

    /**
     * Creates a new AlbumDAO that uses the specified connection string to connect
     * to the database. For example: "jdbc:sqlite:data/Chinook_Sqlite.sqlite"
     *
     * @param jdbcConnection see https://www.baeldung.com/java-jdbc-url-format
     */
    public AlbumDAO(String jdbcConnection) {
        this.connectionString = jdbcConnection;
    }

    /**
     * Returns a list of all albums that have the specified artist as the artist.
     * If there are no albums for the specified artist, the list is empty.
     *
     * @param artist the artist whose albums to retrieve.
     * @return a list of all albums that have the specified artist as the artist,
     *         sorted by AlbumId in ascending order.
     */
    public List<Album> getAlbumsByArtist(Artist artist) {
        /*
         * hint: use the artist.getId() method to get the artist's id and add it to the
         * SQL query using PreparedStatement's setLong() method. See the previous hint
         * in ArtistDao.getArtist() for an example.
         *
         * Note that you must use the `connectionString` field in this class to connect
         * to the database. You can't "hard code" the connection string, as that would
         * make tests run against your actual database, which may have unexpected data.
         *
         * Make sure to sort the albums by AlbumId in ascending order (low to high).
         */
        List<Album> albums = new ArrayList<>();

        try (Connection connection = DriverManager.getConnection(connectionString)) {
            String sql = "SELECT * FROM Album WHERE ArtistId = ? ORDER BY AlbumId";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setLong(1, artist.getId());

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        long albumId = resultSet.getLong("AlbumId");
                        String title = resultSet.getString("Title");
                        Album album = new Album(albumId, title, artist.getId());
                        albums.add(album);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle the exception according to your application's requirements
        }

        return albums;
    }

    /**
     * Adds the specified album to the database. Returns true if the album was
     * added successfully, false otherwise.
     *
     * @param album the album to add to the database.
     * @return true if the album was added successfully, false otherwise.
     */
    public boolean addAlbum(Album album) {
        /*
         * hint 1: use PreparedStatement's setString() and setLong() methods to
         * add the album's title and artist id to the SQL query. Leave the AlbumId
         * blank, as it will be automatically generated by the database.
         *
         * hint 2: executeUpdate() returns the number of rows affected by the query.
         * If the number of rows affected is greater than 0, the album was added.
         *
         * Remember to use the `connectionString` instead of hard coding it ;)
         */
        try (Connection connection = DriverManager.getConnection(connectionString)) {
            String sql = "INSERT INTO Album (Title, ArtistId) VALUES (?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setString(1, album.getTitle());
                preparedStatement.setLong(2, album.getArtistId());

                int rowsAffected = preparedStatement.executeUpdate();
                return rowsAffected > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle the exception according to your application's requirements
        }
        return false;
    }

    /**
     * Updates the specified album in the database. Returns true if the album was
     * updated successfully, false otherwise.
     *
     * @param album the album to update in the database.
     * @return true if the album was updated successfully, false otherwise.
     */
    public boolean updateAlbum(Album album) {
        /*
         * hint 1: use PreparedStatement's setString() and setLong() methods to
         * add the album's title and artist id to the SQL query. Do not change the
         * AlbumId, but use it to identify the album to update.
         *
         * Remember to use the `connectionString` instead of hard coding it, otherwise
         * your tests will be deleting albums from your actual database!
         */
        try (Connection connection = DriverManager.getConnection(connectionString)) {
            String sql = "UPDATE Album SET Title = ? WHERE AlbumId = ? AND ArtistId = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setString(1, album.getTitle());
                preparedStatement.setLong(2, album.getId());
                preparedStatement.setLong(3, album.getArtistId());

                int rowsAffected = preparedStatement.executeUpdate();
                return rowsAffected > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle the exception according to your application's requirements
        }
        return false;
    }

    /**
     * Deletes the specified album from the database. Returns true if the album was
     * deleted successfully, false otherwise.
     *
     * @param album the album to delete from the database.
     * @return true if the album was deleted successfully, false otherwise.
     */
    public boolean deleteAlbum(Album album) {
        /*
         * See hints for the methods above.
         *
         * Remember to use the `connectionString` instead of hard coding it, otherwise
         * your tetss will be deleting albums from your actual database!
         */
        try (Connection connection = DriverManager.getConnection(connectionString)) {
            String sql = "DELETE FROM Album WHERE AlbumId = ? AND ArtistId = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setLong(1, album.getArtistId());
                preparedStatement.setLong(2, album.getArtistId());

                int rowsAffected = preparedStatement.executeUpdate();
                return rowsAffected > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle the exception according to your application's requirements
        }
        return false;
    }
}
